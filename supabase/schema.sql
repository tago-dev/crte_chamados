-- Habilita geração de UUIDs
create extension if not exists "pgcrypto";

-- Tabela de perfis sincronizada com Clerk
create table if not exists public.profiles (
    id text primary key,
    email text,
    full_name text,
    is_admin boolean not null default false,
    created_at timestamptz default now() not null,
    updated_at timestamptz default now() not null
);

create or replace function public.set_current_timestamp()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists profiles_set_timestamp on public.profiles;

create trigger profiles_set_timestamp
before update on public.profiles
for each row
execute function public.set_current_timestamp();

-- Tabela de chamados
create table if not exists public.tickets (
    id uuid primary key default gen_random_uuid (),
    ticket_number bigint generated by default as identity,
    owner_id text not null references public.profiles (id) on delete cascade,
    setor text not null,
    description text not null,
    status text not null default 'aberto',
    solicitante text not null,
    tecnico_responsavel text,
    created_at timestamptz default now() not null
);

create index if not exists tickets_owner_idx on public.tickets (owner_id);

create index if not exists tickets_created_at_idx on public.tickets (created_at desc);

create unique index if not exists tickets_ticket_number_idx on public.tickets (ticket_number);

-- Habilita RLS
alter table public.profiles enable row level security;

alter table public.tickets enable row level security;

drop policy if exists "profiles_self_access" on public.profiles;

create policy "profiles_self_access" on public.profiles for
select using (auth.uid ()::text = id);

drop policy if exists "profiles_service_write" on public.profiles;

create policy "profiles_service_write" on public.profiles for all using (true)
with
    check (true);

drop policy if exists "tickets_owner_access" on public.tickets;

create policy "tickets_owner_access" on public.tickets for
select using (auth.uid ()::text = owner_id);

-- Escrita de chamados via service role
drop policy if exists "tickets_service_insert" on public.tickets;

create policy "tickets_service_insert" on public.tickets for
insert
with
    check (true);